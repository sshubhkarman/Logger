{"ast":null,"code":"import { LoggingLevels } from './logging-levels.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class LoggerService {\n  constructor(http) {\n    this.http = http;\n    this.logs = [];\n    this.logLevel = LoggingLevels.Error;\n  }\n  setLogLevel(level) {\n    this.logLevel = level;\n  }\n  logInfo(message) {\n    this.log(message, LoggingLevels.Info);\n  }\n  // --------------------------------------\n  logWarning(message) {\n    this.log(message, LoggingLevels.Warning);\n  }\n  // -------------------------------------------\n  logError(message) {\n    this.log(message, LoggingLevels.Error);\n  }\n  // ------------------------------------------\n  log(message, level) {\n    const timestamp = new Date().toISOString();\n    const logEntry = `${timestamp} -- [${level}] -- ${message}`;\n    this.logs.push(logEntry);\n    localStorage.setItem('appLogs', JSON.stringify(this.logs));\n  }\n  // --------------------------------------------\n  getLogs() {\n    return this.logs;\n  }\n  isLogLevelHigherOrEqual(logLevel, configLevel) {\n    // Define the order of logging levels based on your application's requirements\n    const levelOrder = ['INFO', 'WARNING', 'ERROR'];\n    const logLevelIndex = levelOrder.indexOf(logLevel.toUpperCase());\n    const configLevelIndex = levelOrder.indexOf(configLevel.toUpperCase());\n    console.log(logLevelIndex, configLevelIndex);\n    // If either log level or config level is not found in the order array, return false\n    if (logLevelIndex === -1 || configLevelIndex === -1) {\n      return false;\n    }\n    return logLevelIndex >= configLevelIndex;\n  }\n  exportLogsToBackend() {\n    const logs = this.getLogs().filter(log => {\n      const logLevel = log.split('--')[1].replace('[', '').replace(']', '').trim();\n      return this.isLogLevelHigherOrEqual(logLevel, this.logLevel);\n    });\n    if (logs.length === 0) return;\n    const dateStamp = new Date().toISOString().slice(0, 10); // Get YYYY-MM-DD format\n    const fileName = `logs_${dateStamp}.txt`;\n    this.http.post('http://localhost:3000/api/logs', {\n      logs,\n      fileName\n    }).subscribe(response => {\n      console.log('Logs exported to backend:', response);\n      this.clearLogs(); // After exporting, clear logs\n    }, error => {\n      console.error('Error exporting logs:', error);\n    });\n  }\n  clearLogs() {\n    this.logs = [];\n    localStorage.removeItem('appLogs');\n  }\n  static #_ = this.ɵfac = function LoggerService_Factory(t) {\n    return new (t || LoggerService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LoggerService,\n    factory: LoggerService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["LoggingLevels","LoggerService","constructor","http","logs","logLevel","Error","setLogLevel","level","logInfo","message","log","Info","logWarning","Warning","logError","timestamp","Date","toISOString","logEntry","push","localStorage","setItem","JSON","stringify","getLogs","isLogLevelHigherOrEqual","configLevel","levelOrder","logLevelIndex","indexOf","toUpperCase","configLevelIndex","console","exportLogsToBackend","filter","split","replace","trim","length","dateStamp","slice","fileName","post","subscribe","response","clearLogs","error","removeItem","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Shubhkarman Singh\\Documents\\Angular-projects\\logger\\src\\app\\logger.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { LoggingLevels } from './logging-levels.enum';\nimport {HttpClient} from '@angular/common/http'\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class LoggerService {\n\n\n  private logs: string[] = [];\n  private logLevel: LoggingLevels = LoggingLevels.Error;\n  constructor(private http: HttpClient) {\n\n  }\n\n  setLogLevel(level: LoggingLevels): void {\n    this.logLevel = level;\n  }\n\n\n  logInfo(message: string): void {\n    this.log(message, LoggingLevels.Info);\n  }\n// --------------------------------------\n  logWarning(message: string): void {\n    this.log(message, LoggingLevels.Warning);\n  }\n// -------------------------------------------\n  logError(message: string): void {\n    this.log(message, LoggingLevels.Error);\n  }\n// ------------------------------------------\n  private log(message: string, level: LoggingLevels): void {\n    const timestamp = new Date().toISOString();\n    const logEntry = `${timestamp} -- [${level}] -- ${message}`;\n\n    this.logs.push(logEntry);\n    localStorage.setItem('appLogs', JSON.stringify(this.logs));\n  }\n// --------------------------------------------\n  getLogs(): string[] {\n    return this.logs;\n  }\n\n  private isLogLevelHigherOrEqual(logLevel: string, configLevel: string): boolean {\n    // Define the order of logging levels based on your application's requirements\n    const levelOrder = ['INFO', 'WARNING', 'ERROR'];\n    const logLevelIndex = levelOrder.indexOf(logLevel.toUpperCase());\n    const configLevelIndex = levelOrder.indexOf(configLevel.toUpperCase());\n    console.log(logLevelIndex, configLevelIndex);\n  \n    // If either log level or config level is not found in the order array, return false\n    if (logLevelIndex === -1 || configLevelIndex === -1) {\n      return false;\n    }\n  \n    return logLevelIndex >= configLevelIndex;\n  }\n\n  exportLogsToBackend(): void {\n    const logs = this.getLogs().filter((log)=>{\n      const logLevel = log.split('--')[1].replace('[', '').replace(']', '').trim() as keyof typeof LoggingLevels;\n      return this.isLogLevelHigherOrEqual(logLevel, this.logLevel);\n    });\n    if(logs.length === 0)\n      return;\n    const dateStamp = new Date().toISOString().slice(0, 10); // Get YYYY-MM-DD format\n    const fileName = `logs_${dateStamp}.txt`;\n\n    this.http.post<any>('http://localhost:3000/api/logs', { logs, fileName }).subscribe(\n      (response) => {\n        console.log('Logs exported to backend:', response);\n        this.clearLogs(); // After exporting, clear logs\n      },\n      (error) => {\n        console.error('Error exporting logs:', error);\n      }\n    );\n  }\n\n  clearLogs(): void {\n    this.logs = [];\n    localStorage.removeItem('appLogs')\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}